#define _CRT_SECURE_NO_WARNINGS 1				//防止scanf报错(包括strcpy/strlen/strcat...等的c语言提供的库函数)
												//加在源文件的第一行 
												//vs2019打开:安装目录\IDE\Common7\IDE\VC\VCProjectItems
												//找到newc++file.cpp然后notepad++里面加入
#include<stdio.h>
#include<string.h>
int main()
{
	int num1 = 0;
	int num2 = 0;
	int sum = 0;
	scanf_s("%d%d", &num1, &num2);				//scanf是c语言提供的，scanf_s不是标准c语言提供，是当前编译器提供的
	scanf("%d%d", &num1, &num2);				//尽量不使用scanf_s(不具有跨平台性、可移植性)
	sum = num1 + num2;
	printf("sum=%d\n", sum);
	3;											//字面常量
	const int sum1 = 4;							//const-常属性，定义后变量不能改变(改变要报错)-常变量
	int arr[10] = { 0 };						//创建数组，数组大小([]中的)只能是常量
												//不能是变量，有常属性的变量也不行
	return 0;
}
#define MAX 10									//#difine定义的标识符常量--MAX=10
int arr[MAX] = { 0 };							//不会报错
												//枚举常量-枚举关键enum
enum Sex
{
	MALE,										//枚举常量默认为0（不可被改变）
	FEMALE,										//枚举常量默认为1（不可被改变）
	SECRET										//枚举常量默认为2（不可被改变）
};												//分号不能少！！！！
int main()
{
	enum Sex s = MALE;							//给s从Sex里面赋值一个MALE
	s = FEMALE;									//可以改动（s是变量）
	return 0;
}
"hello world\n";								//字符串(由双引号引起的一串字符)
"";												//空字符串
int main()
{
	char arr1[] = "abc";						//将字符串放入数组里面(会有一个隐形的\0作结尾表示结束)
												//a,b,c,\0  \0的值是0(ASCII码值)，放0等于放\0--字符串的结束标志
	printf("%s\n", arr1);						//输出数组中的字符串 %s-string字符串  %c输出1个字符
	char arr2[] = { 'a','b','c' };				//单引号单个字符
	printf("%s\n", arr2);						//单个字符不能用字符串输出(%s)，会出现乱码(没有\0不会结束)
	char arr3[] = { 'a','b','c',0 };
	char arr4[] = { 'a','b','c','\0'};			//字符串中\0是转义字符，计算长度的时候作结束标志，不计入内容
	printf("%s\n", arr3);						//不会乱码
	printf("%s\n", arr4);						//不会乱码
	return 0;
}
strlen()										//string length计算字符串长度-c语言自带的函数
												//要使用要加头文件#include<string.h>
												//    \是转义字符，转变后面一个字符的作用
												//    ??加上另外一个字符--三字母词  单独输出???需要转义:\?\?\?
												//   \ddd----ddd表示1~3个8进制数字------转义
												//   \xdd----dd表示2个十六进制数字------转义
												//       一个转义字符只占一个位置！！！！！
\32												//32作为8进制代表的那个10进制数作为ASCII码值对应的字符
												//8进制32-->10进制26-->对应一个箭头—>


												//字符0的ASCII码值是48，9是57，A是65，a是97，大小写字母差值32
/*												//多段注释开始
这里是注释内容
*/												//多段注释结束
												//--//是c++中的注释方式(可嵌套)，/**/是c里面的注释方式(不可嵌套)
int main()
{
	int input = 0;
	printf("学习?(输入1/0)\n");
	scanf("%d", &input);
	if (input == 1)								//判断选择语句
		printf("好offer\n");
	else
		printf("卖红薯\n");
		return 0;
}

int main()
{
	int line = 0;
	while (line < 20000)						//循环语句
	{
		line++;
		printf("我要敲一行代码！%d\n",line);
	}
	if (line >= 20000)
	printf("好offer!\n");
	return 0;
}

int Add(int x, int y)							//自定义函数
{
	int z = x + y;
	return z;
}
int main()
{
	int num1 = 10;
	int num2 = 20;
	int sum = 0;
	int a = 100;
	int b = 200;
	sum = Add(num1, num2);
	sum = Add(a, b);							//加法函数Add（自定义的）
	return 0;
}

int main()
{
	int arr[10] = {1,2,3,4,5,6,7,8,9,10};		//定义一个存放10个int型数字的数组(依次)
	char ch[20];								//下标从0开始
	float arr2[30];
	printf("%d\n", arr[4]);						//输出5
	return 0;
}
												//打印全部内容？
int i = 0;
while (i < 10)
{
	printf("%d ", arr[i]);						//利用循环进行输出
	i++;
}

+ - * / %										//算数操作符(/得到的是商数，%得到的是余数)

>>  <<											//移位操作符(右移，左移)----移2进制位
int a = 1;										//一个整型占4个字节，32比特位
												//内容为0000000000000000000001，表示1
int b = a << 1;									//内容为0000000000000000000010，表示2
int c = a << 2;									//内容为0000000000000000000100，表示4

&  ^  |											//(2进制)位操作符--按位与，按位或，按位异或
int main()
{
	int a = 3;									//011       0为假，1为真
	int b = 5;									//101
	int c = a & b;								//&，与，有假则假，同真则真------输出001---1
												//|，或，有真则真----------------输出111---7
												//^，异或，相同为0，相异为1------输出110---6
	return 0;
}

= += -= *= /= &= ^= |= >>= <<=					//赋值操作符
int main()
{
	int a = 10;									//=赋值    ==判断
	a += 10;									//自加10------------------a=a+10
	a -= 20;									//自减20------------------a=a-20
	a &= 2;										//自与2-------------------a=a&2
												//复合赋值符
	return 0;
}

! - + & sizeof ~ -- ++ * (类型)					//单目操作符----对应双目操作符，三目操作符
int main()
{
	int a = 10;
	int b = 20;
	a + b;										//左右都有操作数，叫双目操作符
	return 0;
}
												//!----逻辑反操作符(c中0表示假，非0表示真)真变假假变真
												//-    取负       +     取正(没啥用)
												// &   取缔	
												//sizeof 算类型/变量(此处括号可省略)所占空间的大小(单位：字节)
												//~			对二进制按位取反
												//--		前置，后置--
												//++		前置，后置++
												//*			间接访问操作符（解引用操作符）
												//(类型)    强制类型转换
