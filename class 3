#define _CRT_SECURE_NO_WARNINGS 1
														//学习语言(c/c++/java/python......)
														//学习算法，数据结构(DS)
														//学习系统和网络(Windows/Linux+系统编程+网络基础+网络编程)
														//动手！！！！自己思考！！！

														//全局变量和局部变量名字冲突时，局部变量优先！不会报错！
														//EOF   end of file 文件结束标志 值是-1
#include<stdio.h>
int max(int a,int b)									//比较大小的函数 子函数在主函数上方可直接使用，否则需要声明
{
	if (a > b)
	{
		return a;
	}
	else
	{
		return b;
	}
	
}
int main()											//比较大小主函数
{
	int num1 = 0;
	int num2 = 0;
	scanf("%d%d", &num1, &num2);
	printf("最大值：%d",max(num1, num2));

	return 0;
}

int main()
{
	int a = 10;
	int arr[] = { 1,2,3,4,5,6 };						//数组会根据里面的内容来确定大小(int是元素的类型)
	printf("%d\n", sizeof(a));							//4
	printf("%d\n", sizeof(int));						//4
	printf("%d\n", sizeof a);							//sizeof是操作符，不是函数。变量可以不用加()
	printf("%d\n", sizeof(arr));						//计算数组大小，单位是字节(6个元素，每个int是4字节)
	printf("%d\n", sizeof(arr) / sizeof(arr[0]));		//算数组里面元素的个数   6
	return 0;
}

int main()												//   ~   按位取反(二进制位)---0变成1,1变成0
{
	int a = 0;											//00000000000000000000000000000000    a的二进制序列
	int b = ~a;											//b是有符号的整型 最高位是符号位(1是负数，0是正数)
	printf("%d\n", b);									//结果是-1
														//原码，反码，补码
														//负数在内存中存储的是2进制的补码
														//打印的是数的原码
															
														//原码符号位不变，其他按位取反得到反码
														//反码+1得到补码

														//00000000000000000000000000000000    a
														//11111111111111111111111111111111    b(补码)a按位取反
														//11111111111111111111111111111110    b(反码)补码-1
														//10000000000000000000000000000001    b(原码)不变号按位取反
														//输出b是-1
	return 0;
}

int main()
{
	int a = 10;
	int b = a++;										//后置++，先使用再++    先把a的值付给b，a再自增1
	int c = ++a;										//前置++，先++再使用    a先自增1，再把a的值付给c
	printf("%d\n", a);									//12(自增2次)
	printf("%d\n", b);									//10
	printf("%d\n", c);									//12

														//前后置--也是相同道理

	return 0;
}

														//*         间接访问操作符(解引用操作符)与取地址操作符&是一对
														//(类型)    强制类型转换

int main()
{
	int a = 3.14;										//将double转化为int，可能丢失数据
	int b = (int)3.14;									//将3.14强制转化为int型(结果是3)
	return 0;
}
														//=    赋值
														//==   相等     !=    不相等

														//&&    逻辑与（并且）
														//||    逻辑或（或者）
int main()
{
	int a = 3;
	int b = 5;
	int c = a && b;										//a,b同时为真，则c为真    c=1
	int d = a || b;										//a,b有一为真，则为真     d=1
	return 0;
}

int main()
{
	int a = 10;
	int b = 20;
	int max = 0;
	if (a > b)											//判断，比较最大值
	{
		max = a;
	}
	else
	{
		max = b;
	}
	max = (a > b ? a : b);								//条件操作符(一个式子) ?前为真,取:前的项  反之则是后面的
														//三目操作符  exp1 ? exp2 : exp3
	printf("%d\n", max);
	return 0;
}


